# -*- coding: utf-8 -*-
# This script was auto-generated by Sim4Life version 5.2.1.1356

import numpy
import s4l_v1.analysis as analysis
import s4l_v1.document as document
import s4l_v1.model as model
import s4l_v1.units as units
from s4l_v1 import ReleaseVersion
from s4l_v1 import Unit

em_simulation_name = "LeadFieldSimulation"
entity_name = "BlockStimtrode2"

# Create variable for field name if you want
#field_name = "J(x,y,z,f0)"

# Creating the analysis pipeline
# Adding a new SimulationExtractor
simulation = document.AllSimulations[em_simulation_name]
simulation_extractor = simulation.Results()

# Adding a new ModelToGridFilter
inputs = []
model_to_grid_filter = analysis.core.ModelToGridFilter(inputs=inputs)
model_to_grid_filter.Name = entity_name
model_to_grid_filter.Entity = model.AllEntities()[entity_name]
model_to_grid_filter.MaximumEdgeLength = 1e-05, units.Meters
model_to_grid_filter.UpdateAttributes()
document.AllAlgorithms.Add(model_to_grid_filter)

# Adding a new EmSensorExtractor
em_sensor_extractor = simulation_extractor["Overall Field"]
em_sensor_extractor.FrequencySettings.ExtractedFrequency = u"All"
document.AllAlgorithms.Add(em_sensor_extractor)

# Adding a new FieldFluxEvaluator
inputs = [em_sensor_extractor.Outputs["J(x,y,z,f0)"], model_to_grid_filter.Outputs["Surface"]]
field_flux_evaluator = analysis.core.FieldFluxEvaluator(inputs=inputs)
field_flux_evaluator.UpdateAttributes()
document.AllAlgorithms.Add(field_flux_evaluator)

# Adding a new DataTableHTMLViewer
inputs = [field_flux_evaluator.Outputs["Total Flux(J(x,y,z,f0))"]] # Might depend on field name
data_table_html_viewer = analysis.viewers.DataTableHTMLViewer(inputs=inputs)
data_table_html_viewer.Visible = False
data_table_html_viewer.UpdateAttributes()
document.AllAlgorithms.Add(data_table_html_viewer)

# Get Data
flux = field_flux_evaluator.Outputs["Total Flux(J(x,y,z,f0))"]
flux.Update()
flux = flux.Data.GetComponent(0)